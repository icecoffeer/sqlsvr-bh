SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[ALCPOOLAVLINVAVG]
AS
BEGIN
  DECLARE
    @GDGID INT,
    @ZBINVQTY MONEY,
    @SALEQTY MONEY,
    @INVQTY MONEY,
    @PSRALCQTY MONEY,
    @SLQTY MONEY,
    @STOREGID INT,
    @ALCQTY MONEY,
    @SLQTYNEW MONEY,
    @PRICE MONEY,
    @INPRC MONEY,
    @RTLPRC MONEY,
    @WSPRC MONEY,
    @TAXRATE MONEY,
    @QPC MONEY,
    @WRH INT,
    @INVTOTAL MONEY,
    @DIFF MONEY,
    @DIFFM MONEY,
    @SETTLENO INT,
    @QTYPOLICY INT,
    @ORDQTY MONEY,
    @AUTOALCQTY MONEY,
    @SRCFROM INT,
    @QTY MONEY,
    @FROM INT,
    @SUMQTY MONEY,
    @CKINV INT,
    @SLQTYNEWTOTAL MONEY,
    @STORECODE CHAR(10),
    @MSG VARCHAR(255),
    @ZBINVQTY1 MONEY,
    @SLQTYNEW2 MONEY,
    @USERGID INT

  EXEC OPTREADINT 500, 'QTYPOLICY', 0, @QTYPOLICY OUTPUT
  EXEC OPTREADINT 90, 'CKINV', 0, @CKINV OUTPUT
  SELECT @SETTLENO = MAX(NO) FROM MONTHSETTLE

  SELECT @ZBINVQTY = 0

  --QTY:实际配货数 QTYFROM：来源
  EXEC PPS_ALCPOOL_APPLY_QTYPOLICY @MSG OUTPUT

  IF OBJECT_ID('TEMPDB..#B1') IS NOT NULL DROP TABLE #B1
  SELECT ASTORE, BGDGID, SUM(DQ1 - DQ5) SALEQTY, MAX(ISNULL(FLAG,0)) FLAG
  INTO #B1
  FROM MOUTDRPT X(NOLOCK), ALCPOOLTEMP A(NOLOCK)
  WHERE X.ASTORE = A.STOREGID
  AND X.BGDGID = A.GDGID
  AND A.ALC = '统配'
  AND X.ADATE BETWEEN
  DATEADD(DAY, -1 - 7, GETDATE())
  AND DATEADD(DAY, -1, GETDATE())
  GROUP BY ASTORE, BGDGID

  IF OBJECT_ID('TEMPDB..#C1') IS NOT NULL DROP TABLE #C1
  SELECT ASTORE, BGDGID, SUM(SALEQTY * (1 - FLAG)) SALEQTY
  INTO #C1
  FROM #B1 (NOLOCK) GROUP BY ASTORE, BGDGID

  IF OBJECT_ID('TEMPDB..#STORESALE') IS NOT NULL DROP TABLE #STORESALE
  SELECT A.STOREGID, A.GDGID, ISNULL(#C1.SALEQTY / 7, 0) SALEQTY, ISNULL(V.QTY, 0) INVQTY, A.QTYFROM SRCFROM, @ZBINVQTY QTY, @ZBINVQTY ZBINVQTY,'1' FLAG
  INTO #STORESALE
  FROM ALCPOOLTEMP A(NOLOCK), #C1(NOLOCK), V_INV V(NOLOCK)
  WHERE  A.STOREGID *= V.STORE AND V.WRH = 1 AND A.GDGID *= V.GDGID   AND A.STOREGID *= #C1.ASTORE
    AND A.GDGID *= #C1.BGDGID AND A.ALC = '统配'

  UPDATE #STORESALE SET #STORESALE.QTY = P.SQTY
  FROM (SELECT SUM(A.QTY) SQTY, A.GDGID
  FROM ALCPOOLTEMP A(NOLOCK)
  GROUP BY A.GDGID) P
  WHERE P.GDGID = #STORESALE.GDGID

  SELECT @USERGID = USERGID FROM SYSTEM(NOLOCK)

  UPDATE #STORESALE SET #STORESALE.ZBINVQTY = P.ZBINVQTY
  FROM (SELECT ISNULL(V.QTY, 0) ZBINVQTY, G.GID FROM V_INV V(NOLOCK), GOODS G(NOLOCK)
    WHERE V.STORE = @USERGID AND V.WRH = G.WRH AND V.GDGID = G.GID) P
  WHERE P.GID = #STORESALE.GDGID

  UPDATE #STORESALE SET #STORESALE.FLAG = '0'
  from STORE(NOLOCK)
  WHERE STORE.GID = #STORESALE.STOREGID AND convert(datetime,isnull(STORE.svrname,convert(varchar(10),getdate(),102))) >= convert(datetime,convert(varchar(10),dateadd(day,-7,getdate()),102))

  IF OBJECT_ID('TEMPDB..#APTMP') IS NOT NULL DROP TABLE #APTMP
  SELECT * INTO #APTMP FROM ALCPOOLTEMP(nolock)-- WHERE GDGID = @GDGID AND ALC = '统配'
  truncate table  clearalcpooltemp
  insert into clearalcpooltemp(storegid,gdgid)
  select distinct storegid,gdgid from alcpooltemp(nolock)
  DECLARE C_LAC CURSOR FOR
  SELECT GDGID
  FROM #STORESALE(NOLOCK)
  WHERE QTY > ZBINVQTY
  GROUP BY GDGID

  OPEN C_LAC
  FETCH NEXT FROM C_LAC INTO @GDGID
  WHILE @@FETCH_STATUS = 0
  BEGIN

    --第一次分配
    SELECT @ALCQTY = ISNULL(ALCQTY, 1), @PRICE = RTLPRC, @INPRC = INPRC, @RTLPRC = RTLPRC, @WSPRC = WHSPRC,
        @TAXRATE = TAXRATE, @QPC = QPC, @WRH = WRH
    FROM GOODS(NOLOCK) WHERE GID = @GDGID

    DECLARE C_LAC1 CURSOR FOR
    SELECT S.SALEQTY, S.INVQTY, A.PSRALCQTY, A.STOREGID, A.ORDQTY, A.AUTOALCQTY, S.SRCFROM, S.ZBINVQTY
    FROM ALCPOOLTEMP A(NOLOCK), #STORESALE S(NOLOCK)
    WHERE S.STOREGID = A.STOREGID AND S.GDGID = A.GDGID AND A.GDGID = @GDGID AND ALC = '统配'
    ORDER BY S.FLAG,S.SALEQTY DESC

    OPEN C_LAC1
    FETCH NEXT FROM C_LAC1 INTO @SALEQTY, @INVQTY, @PSRALCQTY, @STOREGID, @ORDQTY, @AUTOALCQTY, @FROM, @ZBINVQTY1
    SET @ZBINVQTY = @ZBINVQTY1

    WHILE @@FETCH_STATUS = 0
    BEGIN
      SET @SLQTY = @SALEQTY * 3 - @INVQTY
      IF @SLQTY <= 0 set @SLQTY = 0
      ELSE IF @SLQTY < @ALCQTY SET @SLQTY = @ALCQTY
      ELSE SET @SLQTY = ROUND(@SLQTY / @ALCQTY, 0) * @ALCQTY

      IF @FROM = 1
      BEGIN
        IF @PSRALCQTY < @SLQTY SET @SLQTY = @PSRALCQTY
      END
      ELSE IF @FROM = 2
      BEGIN
        IF @ORDQTY < @SLQTY SET @SLQTY = @ORDQTY
      END
      ELSE IF @FROM = 3
      BEGIN
        IF @AUTOALCQTY < @SLQTY SET @SLQTY = @AUTOALCQTY
      END

      IF @SLQTY <= 0
      BEGIN
        IF @FROM = 1
        BEGIN
          UPDATE ALCPOOLTEMP SET PSRALCQTY = 0 WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        ELSE IF @FROM = 2
        BEGIN
          UPDATE ALCPOOLTEMP SET ORDQTY = 0 WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        ELSE IF @FROM = 3
        BEGIN
          UPDATE ALCPOOLTEMP SET AUTOALCQTY = 0 WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
      END
      ELSE IF @SLQTY < @ZBINVQTY
      BEGIN
        IF @FROM = 1
        BEGIN
          UPDATE ALCPOOLTEMP SET PSRALCQTY = @SLQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        ELSE IF @FROM = 2
        BEGIN
          UPDATE ALCPOOLTEMP SET ORDQTY = @SLQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        ELSE IF @FROM = 3
        BEGIN
          UPDATE ALCPOOLTEMP SET AUTOALCQTY = @SLQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        SET @ZBINVQTY = @ZBINVQTY - @SLQTY
      END
      ELSE
      BEGIN
        IF @FROM = 1
        BEGIN
          UPDATE ALCPOOLTEMP SET PSRALCQTY = @ZBINVQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        ELSE IF @FROM = 2
        BEGIN
          UPDATE ALCPOOLTEMP SET ORDQTY = @ZBINVQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        ELSE IF @FROM = 3
        BEGIN
          UPDATE ALCPOOLTEMP SET AUTOALCQTY = @ZBINVQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        END
        SET @ZBINVQTY = 0
      END

      FETCH NEXT FROM C_LAC1 INTO @SALEQTY, @INVQTY, @PSRALCQTY, @STOREGID, @ORDQTY, @AUTOALCQTY, @FROM, @ZBINVQTY1
    END
    CLOSE C_LAC1
    DEALLOCATE C_LAC1

    --第二次分配

    SELECT @INVQTY = ISNULL(V.QTY, 0), @INVTOTAL = ISNULL(V.TOTAL, 0)
    FROM V_INV V(NOLOCK), GOODS G(NOLOCK), SYSTEM S(NOLOCK)
    WHERE V.STORE = S.USERGID AND V.WRH = G.WRH AND V.GDGID = G.GID AND G.GID = @GDGID

    DECLARE C_LAC1 CURSOR FOR
    SELECT A.STOREGID, ISNULL(S.SRCFROM, 1)
    FROM ALCPOOLTEMP A(NOLOCK), #STORESALE S(NOLOCK)
    WHERE S.STOREGID = A.STOREGID AND S.GDGID = A.GDGID AND A.GDGID = @GDGID AND A.ALC = '统配'
    ORDER BY S.FLAG,S.SALEQTY DESC

    OPEN C_LAC1
    FETCH NEXT FROM C_LAC1 INTO @STOREGID, @SRCFROM
    WHILE @@FETCH_STATUS = 0
    BEGIN
      IF @SRCFROM = 1
      BEGIN
        SELECT @SLQTY = ISNULL(PSRALCQTY, 0) FROM #APTMP(NOLOCK) WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        SELECT @SLQTYNEW = ISNULL(PSRALCQTY, 0) FROM ALCPOOLTEMP(NOLOCK) WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        SET @SLQTYNEW2 = @SLQTYNEW
        IF @ZBINVQTY <> 0
           BEGIN
             IF @SLQTY - @SLQTYNEW < @ZBINVQTY
             BEGIN
               UPDATE ALCPOOLTEMP SET PSRALCQTY = @SLQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
               SET @SLQTYNEW2 = @SLQTY
               SET @ZBINVQTY = @ZBINVQTY - (@SLQTY - @SLQTYNEW)
             END
             ELSE
             BEGIN
               UPDATE ALCPOOLTEMP SET PSRALCQTY = @SLQTYNEW + @ZBINVQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
               SET @SLQTYNEW2 = @SLQTYNEW + @ZBINVQTY
               SET @ZBINVQTY = 0
             END
          END
      END
      ELSE IF @SRCFROM = 2
      BEGIN
        SELECT @SLQTY = ISNULL(ORDQTY, 0) FROM #APTMP(NOLOCK) WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        SELECT @SLQTYNEW = ISNULL(ORDQTY, 0) FROM ALCPOOLTEMP(NOLOCK) WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        SET @SLQTYNEW2 = @SLQTYNEW
        IF @ZBINVQTY <> 0
          BEGIN
             IF @SLQTY - @SLQTYNEW < @ZBINVQTY
             BEGIN
               UPDATE ALCPOOLTEMP SET ORDQTY = @SLQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
               SET @ZBINVQTY = @ZBINVQTY - (@SLQTY - @SLQTYNEW)
             END
             ELSE
             BEGIN
               UPDATE ALCPOOLTEMP SET ORDQTY = @SLQTYNEW + @ZBINVQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
               SET @ZBINVQTY = 0
             END
          END
      END
      ELSE IF @SRCFROM = 3
      BEGIN
        SELECT @SLQTY = ISNULL(AUTOALCQTY, 0) FROM #APTMP(NOLOCK) WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        SELECT @SLQTYNEW = ISNULL(AUTOALCQTY, 0) FROM ALCPOOLTEMP(NOLOCK) WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
        SET @SLQTYNEW2 = @SLQTYNEW
        IF @ZBINVQTY <> 0
          BEGIN
             IF @SLQTY - @SLQTYNEW < @ZBINVQTY
             BEGIN
               UPDATE ALCPOOLTEMP SET AUTOALCQTY = @SLQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
               SET @ZBINVQTY = @ZBINVQTY - (@SLQTY - @SLQTYNEW)
             END
             ELSE
             BEGIN
               UPDATE ALCPOOLTEMP SET AUTOALCQTY = @SLQTYNEW + @ZBINVQTY WHERE STOREGID = @STOREGID AND GDGID = @GDGID AND ALC = '统配'
               SET @ZBINVQTY = 0
             END
          END
      END

      SELECT @STORECODE = CODE FROM STORE(NOLOCK) WHERE GID = @STOREGID

      SET @DIFF = @SLQTY - @SLQTYNEW2
      SET @DIFFM = @DIFF * @PRICE
      SET @SLQTYNEW2 = @INVQTY - @ZBINVQTY
      SET @SLQTYNEWTOTAL = @SLQTYNEW2 * @PRICE
      IF @DIFF > 0
      BEGIN
        --记缺货列表、待配和配货池
        EXECUTE STKOUTCHKREGLACK
                @CKINV,
                @GDGID, @PRICE, @INPRC, @RTLPRC, @WSPRC, @TAXRATE, @QPC, 0,
                @WRH, @INVQTY, @INVTOTAL, @SLQTYNEW2, @SLQTYNEWTOTAL, @DIFF, @DIFFM,
                '配货', @STORECODE, @USERGID, @SETTLENO, @STOREGID, 1, 1,
                '', ''
      END

      FETCH NEXT FROM C_LAC1 INTO @STOREGID, @SRCFROM
    END
    CLOSE C_LAC1
    DEALLOCATE C_LAC1

    FETCH NEXT FROM C_LAC INTO @GDGID
  END
  CLOSE C_LAC
  DEALLOCATE C_LAC
  Delete From Alcpooltemp WHERE PSRALCQTY = 0 AND ORDQTY = 0 AND AUTOALCQTY = 0
  --DELETE FROM ALCPOOLHTEMP WHERE PSRALCQTY = 0 AND ORDQTY = 0 AND AUTOALCQTY = 0
END
GO
