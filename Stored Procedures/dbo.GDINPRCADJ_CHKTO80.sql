SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[GDINPRCADJ_CHKTO80](
  @NUM	CHAR(14),
  @OPER	CHAR(30),
  @CLS	CHAR(10),
  @TOSTAT INT,
  @MSG	VARCHAR(255) OUTPUT
)
AS
BEGIN
  DECLARE
    @SETTLENO INT,
    @WRH INT,
    @QTY MONEY,
    @GDGID INT,
    @OLDPRC MONEY,
    @NEWPRC MONEY,
    @USERGID INT,
    @ADJMETHOD INT,
    @DIFFPRC MONEY,
    @OPT VARCHAR(1),
    @ORIGDGID INT,
    @ADJQTY MONEY,
    @SUMAMT MONEY,
    @WRHCNT INT,
    @SUMDIFF MONEY,
    @CNT INT,
    @WRHINVPRC MONEY,
    @DIFF MONEY,
    @SUMQTY MONEY,
    @OPTADJ VARCHAR(1),
    @WRHDTL INT,
    @OLDPRC1 MONEY,
    @NEWPRC1 MONEY,
    @SUMAMT1 MONEY,
    @SUMQTY1 MONEY,
    @TMPCNT INT,
    @TMPORIGDGID INT


    SELECT @SETTLENO = MAX(NO) FROM MONTHSETTLE(NOLOCK)
    SELECT @USERGID = USERGID FROM SYSTEM(NOLOCK)

    SELECT @OPT = OPTIONVALUE FROM HDOPTION WHERE MODULENO = 649 AND OPTIONCAPTION = 'ADJNEGINV'
    IF @OPT IS NULL SET @OPT = '0'

    SELECT @OPTADJ = OPTIONVALUE FROM HDOPTION WHERE MODULENO = 649 AND OPTIONCAPTION = 'ADJHIGHPRC'
    IF @OPTADJ IS NULL SET @OPTADJ = '0'

    SELECT @ADJMETHOD = ADJMETHOD FROM INPRCADJNOTIFY A(NOLOCK), GDINPRCADJ B(NOLOCK)
      WHERE B.NUM = @NUM AND B.SRCNUM = A.NUM AND B.SRCBILL = 'INPRCADJNOTIFY'

    SET @CNT = -1
    SET @ORIGDGID = 0
    SET @TMPORIGDGID = 0
    DECLARE C_WRH CURSOR FOR
      SELECT GDGID, WRH, INVQTY, OLDPRC, NEWPRC, DIFFPRC, QTY
      FROM GDINPRCADJDTL (NOLOCK)
      WHERE NUM = @NUM
      ORDER BY GDGID
    OPEN C_WRH
    FETCH NEXT FROM C_WRH INTO @GDGID, @WRH, @QTY, @OLDPRC, @NEWPRC, @DIFFPRC, @ADJQTY
    WHILE @@FETCH_STATUS = 0
    BEGIN
      IF @ADJMETHOD = 1 --指定价
      BEGIN
        IF (@OPTADJ = 0) AND (@NEWPRC > @OLDPRC)
        BEGIN
          UPDATE GDINPRCADJDTL SET NOTE = '[生效失败]' + '商品' + LTRIM(STR(@GDGID)) + '在仓位' + LTRIM(STR(@WRH)) + '调整后价格高于原价格',
            DIFFAMT = 0, CNTAMT = 0, QTY = 0
          WHERE NUM = @NUM AND WRH = @WRH AND GDGID = @GDGID
        END ELSE IF (@OPT = 0) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRH) < 0)
        BEGIN
          UPDATE GDINPRCADJDTL SET NOTE = '[生效失败]' + '商品' + LTRIM(STR(@GDGID)) + '在仓位' + LTRIM(STR(@WRH)) + '为负库存',
            DIFFAMT = 0, CNTAMT = 0, QTY = 0
          WHERE NUM = @NUM AND WRH = @WRH AND GDGID = @GDGID
        END ELSE BEGIN
          IF ((@OPT = 1) OR ((@OPT = 0) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRH) >= 0)))
            AND ((@OPTADJ = 1) OR ((@OPTADJ = 0) AND (@NEWPRC <= @OLDPRC)))
          BEGIN
            INSERT INTO KC (ADATE, ASETTLENO, BWRH, BGDGID, TJ_Q, TJ_I )
              VALUES (CONVERT(DATETIME, CONVERT(CHAR, GETDATE(), 102)), @SETTLENO, @WRH, @GDGID, @QTY,
              CONVERT(DECIMAL(20, 2), @QTY * (@NEWPRC - @OLDPRC)))

            UPDATE GDINPRCADJDTL SET QTY = @QTY, DIFFAMT = @QTY * DIFFPRC
            WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH

            UPDATE GDWRH SET INVCOST = @QTY * @NEWPRC, INVPRC = @NEWPRC
            WHERE GDGID = @GDGID AND WRH = @WRH

            UPDATE GDINPRCADJDTL SET CNTAMT = (@NEWPRC - ISNULL(G.CNTINPRC, 0)) * QTY
            FROM GOODS G(NOLOCK), GDWRH W(NOLOCK)
            WHERE GDINPRCADJDTL.NUM = @NUM AND GDINPRCADJDTL.GDGID = @GDGID AND GDINPRCADJDTL.WRH = @WRH
              AND G.GID = @GDGID AND W.WRH = @WRH AND W.GDGID = @GDGID
          END
        END
      END
      ELSE IF @ADJMETHOD = 0 --差价
      BEGIN
        IF @GDGID <> @TMPORIGDGID
          SET @TMPCNT = 0
        SELECT @WRHCNT = COUNT(1) FROM GDWRH G(NOLOCK), INV I(NOLOCK)
        WHERE G.GDGID = @GDGID AND G.GDGID = I.GDGID AND I.STORE = @USERGID AND I.WRH = G.WRH
        IF (@OPTADJ = 0) AND (@NEWPRC > @OLDPRC)
        BEGIN
          UPDATE GDINPRCADJDTL SET NOTE = '[生效失败]' + '商品' + LTRIM(STR(@GDGID)) + '在仓位' + LTRIM(STR(@WRH)) + '调整后价格高于原价格',
            DIFFAMT = 0, CNTAMT = 0, QTY = 0
          WHERE NUM = @NUM AND WRH = @WRH AND GDGID = @GDGID
          IF @CNT <> - 1 SET @CNT = @CNT + 1
          ELSE SET @TMPCNT = @TMPCNT + 1
          SET @TMPORIGDGID = @GDGID
          FETCH NEXT FROM C_WRH INTO @GDGID, @WRH, @QTY, @OLDPRC, @NEWPRC, @DIFFPRC, @ADJQTY
          CONTINUE
        END ELSE IF (@OPT = 0) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRH) < 0)
        BEGIN
          UPDATE GDINPRCADJDTL SET NOTE = '[生效失败]' + '商品' + LTRIM(STR(@GDGID)) + '在仓位' + LTRIM(STR(@WRH)) + '为负库存',
            DIFFAMT = 0, CNTAMT = 0, QTY = 0
          WHERE NUM = @NUM AND WRH = @WRH AND GDGID = @GDGID
          IF @CNT <> - 1 SET @CNT = @CNT + 1
          ELSE SET @TMPCNT = @TMPCNT + 1
          SET @TMPORIGDGID = @GDGID
          FETCH NEXT FROM C_WRH INTO @GDGID, @WRH, @QTY, @OLDPRC, @NEWPRC, @DIFFPRC, @ADJQTY
          CONTINUE
        END
        --对于差价:多个仓位情况下强制不能调整负库存
        IF (@OPT = 1) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRH) < 0)
          AND (@WRHCNT > 1)
        BEGIN
          UPDATE GDINPRCADJDTL SET NOTE = '[生效失败]' + '商品' + LTRIM(STR(@GDGID)) + '在仓位' + LTRIM(STR(@WRH)) + '为负库存(多个仓位情况下强制不能调整负库存)',
            DIFFAMT = 0, CNTAMT = 0, QTY = 0
          WHERE NUM = @NUM AND WRH = @WRH AND GDGID = @GDGID
          IF @CNT <> - 1 SET @CNT = @CNT + 1
          ELSE SET @TMPCNT = @TMPCNT + 1
          SET @TMPORIGDGID = @GDGID
          FETCH NEXT FROM C_WRH INTO @GDGID, @WRH, @QTY, @OLDPRC, @NEWPRC, @DIFFPRC, @ADJQTY
          CONTINUE
        END
        IF ((@OPT = 1) OR ((@OPT = 0) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRH) >= 0)))
          AND ((@OPTADJ = 1) OR ((@OPTADJ = 0) AND (@NEWPRC <= @OLDPRC)))
        BEGIN
          IF @GDGID <> @ORIGDGID
          BEGIN
            SET @SUMAMT = 0
            SET @SUMQTY = 0
            DECLARE C_LAC CURSOR FOR
            SELECT WRH, OLDPRC, NEWPRC
            FROM GDINPRCADJDTL(NOLOCK)
            WHERE NUM = @NUM AND GDGID = @GDGID

            OPEN C_LAC
            FETCH NEXT FROM C_LAC INTO @WRHDTL, @OLDPRC1, @NEWPRC1

            WHILE @@FETCH_STATUS = 0
            BEGIN
              SELECT @WRHCNT = COUNT(1) FROM GDWRH G(NOLOCK), INV I(NOLOCK)
              WHERE G.GDGID = @GDGID AND G.GDGID = I.GDGID AND I.STORE = @USERGID AND I.WRH = G.WRH
              IF ((@OPT = 1) OR ((@OPT = 0) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRHDTL) >= 0)))
                AND ((@OPTADJ = 1) OR ((@OPTADJ = 0) AND (@NEWPRC1 < @OLDPRC1)))
              BEGIN
                IF NOT ((@OPT = 1) AND ((SELECT ISNULL(SUM(QTY), 0) FROM INV(NOLOCK) WHERE GDGID = @GDGID AND STORE = @USERGID AND WRH = @WRHDTL) < 0)
                  AND (@WRHCNT > 1))
                BEGIN
                  SELECT @SUMAMT1 = ABS(I.QTY * G.INVPRC), @SUMQTY1 = ABS(I.QTY) FROM GDWRH G(NOLOCK), INV I(NOLOCK)
                  WHERE G.GDGID = @GDGID AND G.GDGID = I.GDGID AND I.STORE = @USERGID AND I.WRH = G.WRH AND I.WRH = @WRHDTL
                  SET @SUMAMT1 = ISNULL(@SUMAMT1, 0)
                  SET @SUMQTY1 = ISNULL(@SUMQTY1, 0)
                  SET @SUMAMT = @SUMAMT + @SUMAMT1
                  SET @SUMQTY = @SUMQTY + @SUMQTY1
                END
              END
              FETCH NEXT FROM C_LAC INTO @WRHDTL, @OLDPRC1, @NEWPRC1
            END
            CLOSE C_LAC
            DEALLOCATE C_LAC
          END

          SELECT @WRHCNT = COUNT(1) FROM GDWRH G(NOLOCK), INV I(NOLOCK)
          WHERE G.GDGID = @GDGID AND G.GDGID = I.GDGID AND I.STORE = @USERGID AND I.WRH = G.WRH
          SET @SUMAMT = ISNULL(@SUMAMT, 0)
          IF @SUMAMT = 0 SET @SUMAMT = 1 --避免被0除的情况
          SET @SUMQTY = ISNULL(@SUMQTY, 0)
          IF @ADJQTY > @SUMQTY
          BEGIN
            SET @ADJQTY = @SUMQTY
            UPDATE GDINPRCADJDTL SET QTY = @SUMQTY WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH
          END
          IF @WRHCNT = 1 AND @ADJQTY < 0
          BEGIN
            SET @ADJQTY = @SUMQTY
            UPDATE GDINPRCADJDTL SET QTY = @SUMQTY, NEWPRC = OLDPRC - @DIFFPRC
            WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH
          END
          IF @GDGID <> @ORIGDGID
          BEGIN
            SET @SUMDIFF = @ADJQTY * @DIFFPRC
            IF @TMPCNT <> 0 SET @CNT = @TMPCNT + 1
            ELSE SET @CNT = 1
          END
          IF @CNT < @WRHCNT
          BEGIN
            SELECT @WRHINVPRC = INVPRC FROM GDWRH WHERE GDGID = @GDGID AND WRH = @WRH
            INSERT INTO KC (ADATE, ASETTLENO, BWRH, BGDGID, TJ_Q, TJ_I )
              VALUES (CONVERT(DATETIME, CONVERT(CHAR, GETDATE(), 102)), @SETTLENO, @WRH, @GDGID, 0,  --数量没有用到，可任意值传入
              CONVERT(DECIMAL(20, 2), @ADJQTY * @DIFFPRC * @QTY * @WRHINVPRC / @SUMAMT))
            SET @SUMDIFF = @SUMDIFF - @ADJQTY * @DIFFPRC * @QTY * @WRHINVPRC / @SUMAMT
            SET @CNT = @CNT + 1
            SET @DIFF = @ADJQTY * @DIFFPRC * @QTY * @WRHINVPRC / @SUMAMT

            UPDATE GDINPRCADJDTL SET QTY = QTY * @QTY * @WRHINVPRC / @SUMAMT
            WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH
            UPDATE GDINPRCADJDTL SET DIFFAMT = QTY * DIFFPRC
            WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH
          END ELSE BEGIN
            INSERT INTO KC (ADATE, ASETTLENO, BWRH, BGDGID, TJ_Q, TJ_I )
              VALUES (CONVERT(DATETIME, CONVERT(CHAR, GETDATE(), 102)), @SETTLENO, @WRH, @GDGID, 0,  --数量没有用到，可任意值传入
              CONVERT(DECIMAL(20, 2), @SUMDIFF))
            SET @DIFF = @SUMDIFF

            UPDATE GDINPRCADJDTL SET QTY = QTY - ISNULL((SELECT SUM(QTY) FROM GDINPRCADJDTL WHERE NUM = @NUM AND GDGID = @GDGID AND WRH <> @WRH), 0)
            WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH
            UPDATE GDINPRCADJDTL SET DIFFAMT = QTY * DIFFPRC
            WHERE NUM = @NUM AND GDGID = @GDGID AND WRH = @WRH
            SET @CNT = -1
          END
          IF @QTY <> 0
          BEGIN
            UPDATE GDWRH SET INVPRC = (INVPRC * @QTY + @DIFF) / @QTY
            WHERE GDGID = @GDGID AND WRH = @WRH
          END

          UPDATE GDWRH SET INVCOST = @QTY * INVPRC
          WHERE GDGID = @GDGID AND WRH = @WRH

          UPDATE GDINPRCADJDTL SET CNTAMT = (@NEWPRC - ISNULL(G.CNTINPRC, 0)) * QTY
          FROM GOODS G(NOLOCK), GDWRH W(NOLOCK)
          WHERE GDINPRCADJDTL.NUM = @NUM AND GDINPRCADJDTL.GDGID = @GDGID AND GDINPRCADJDTL.WRH = @WRH
            AND G.GID = @GDGID AND W.WRH = @WRH AND W.GDGID = @GDGID

          SET @ORIGDGID = @GDGID
          SET @TMPORIGDGID = @GDGID
        END
      END

      FETCH NEXT FROM C_WRH INTO @GDGID, @WRH, @QTY, @OLDPRC, @NEWPRC, @DIFFPRC, @ADJQTY
    END
    CLOSE C_WRH
    DEALLOCATE C_WRH

    UPDATE GDINPRCADJ SET STAT = 800 WHERE NUM = @NUM

  RETURN 0
END
GO
